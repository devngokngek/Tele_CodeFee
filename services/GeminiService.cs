using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using TeleBot.Config;

namespace TeleBot.Services
{
    public class GeminiService
    {
        private readonly string _apiKey;
        private readonly HttpClient _http;

        public GeminiService(AppConfig config)
        {
            _apiKey = config.Gemini.ApiKey;
            _http = new HttpClient();
        }

        public async Task<string> AskAsync(string input)
        {
            if (string.IsNullOrEmpty(_apiKey))
                return "‚ùå Ch∆∞a c·∫•u h√¨nh API Key cho Gemini.";

            var body = new
            {
                contents = new[]
                {
                    new
                    {
                        role = "user",
                        parts = new[] { new { text = input } }
                    }
                }
            };

            string url = $"https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key={_apiKey}";

            var jsonBody = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json");

            try
            {
                var response = await _http.PostAsync(url, jsonBody);
                string json = await response.Content.ReadAsStringAsync();

                if (!response.IsSuccessStatusCode)
                {
                    return $"‚ö†Ô∏è L·ªói Gemini API ({(int)response.StatusCode}): {json}";
                }

                using var doc = JsonDocument.Parse(json);

                // Ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªùng c·∫ßn thi·∫øt
                if (doc.RootElement.TryGetProperty("candidates", out var candidates))
                {
                    var text = candidates[0]
                        .GetProperty("content")
                        .GetProperty("parts")[0]
                        .GetProperty("text")
                        .GetString();

                    return string.IsNullOrWhiteSpace(text)
                        ? "ü§î Gemini kh√¥ng ph·∫£n h·ªìi n·ªôi dung n√†o."
                        : text.Trim();
                }

                // N·∫øu kh√¥ng c√≥ candidates m√† c√≥ promptFeedback
                if (doc.RootElement.TryGetProperty("promptFeedback", out var feedback))
                {
                    return $"‚ö†Ô∏è Gemini t·ª´ ch·ªëi ph·∫£n h·ªìi: {feedback.ToString()}";
                }

                return "‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini.";
            }
            catch (HttpRequestException ex)
            {
                return $"‚ö†Ô∏è L·ªói m·∫°ng khi k·∫øt n·ªëi Gemini: {ex.Message}";
            }
            catch (JsonException ex)
            {
                return $"‚ö†Ô∏è L·ªói ph√¢n t√≠ch JSON: {ex.Message}";
            }
            catch (System.Exception ex)
            {
                return $"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {ex.Message}";
            }
        }
    }
}
