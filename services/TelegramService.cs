using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using TeleBot.Config;
using System.Threading;
using System.Threading.Tasks;
using System;
using TeleBot.Services;
using Microsoft.Data.Sqlite;
using Telegram.Bot.Types.ReplyMarkups;

namespace TeleBot.Services
{
    public class TelegramService
    {
        private readonly TelegramBotClient _bot;
        private readonly AppConfig _config;
        private CancellationTokenSource _cts;
        private readonly GoldPriceService _goldService = new();
        private readonly UserService _userService;
        private readonly ComicService _comicService = new();
        private readonly GeminiService _gemini;
        private readonly DatabaseService _db = new();


        private long _adminChatId = 5642891542;

        public TelegramService(AppConfig config)
        {
            _config = config;
            _bot = new TelegramBotClient(config.Bot.Token);
            _userService = new UserService(_bot);
            _gemini = new GeminiService(config);

        }

        public async Task StartAsync()
        {
            try
            {
                var me = await _bot.GetMe();
                Console.WriteLine($"‚úÖ Bot @{me.Username} ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Telegram Bot: {ex.Message}");
                return;
            }

            _cts = new CancellationTokenSource();

            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>()
            };

            _bot.StartReceiving(
                HandleUpdateAsync,
                HandleErrorAsync,
                receiverOptions,
                _cts.Token
            );

            Console.WriteLine("ü§ñ Bot ƒëang ch·∫°y... Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.");
            // ch·∫°y task n·ªÅn c·∫≠p nh·∫≠t gi√° v√†ng li√™n t·ª•c
            _ = Task.Run(() => AutoUpdateGoldPriceAsync(_cts.Token));
            //truy·ªán
            _ = Task.Run(() => AutoUpdateComicAsync(_cts.Token));

            await Task.Delay(-1, _cts.Token);
        }

        private async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken token)
        {
            try
            {
                // üü¢ 1Ô∏è‚É£ X·ª≠ l√Ω Callback (b·∫•m n√∫t InlineKeyboard)
                if (update.CallbackQuery is { } callback)
                {
                    var chatId = callback.Message.Chat.Id;
                    var data = callback.Data;

                    switch (data)
                    {
                        case "giavang":
                            var goldPrice = await _goldService.GetGoldPriceAsync();
                            await bot.SendMessage(
                                chatId,
                                text: EscapeMarkdown($"üí∞ Gi√° v√†ng BTMC m·ªõi nh·∫•t:\n\n{goldPrice}"),
                                parseMode: ParseMode.MarkdownV2,
                                cancellationToken: token
                            );
                            break;

                        case "userinfo":
                            var userInfo = await _userService.GetUserInfoAsync(callback.From);
                            await bot.SendMessage(
                                chatId,
                                text: EscapeMarkdown(userInfo),
                                parseMode: ParseMode.MarkdownV2,
                                cancellationToken: token
                            );
                            break;

                        case "help":
                            string helpText =
                                "üìò *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:*\n\n" +
                                "‚Ä¢ /start ‚Äì Hi·ªÉn th·ªã menu ch√≠nh\n" +
                                "‚Ä¢ /giavang ‚Äì Xem gi√° v√†ng m·ªõi nh·∫•t\n" +
                                "‚Ä¢ /userinfo ‚Äì Xem th√¥ng tin c·ªßa b·∫°n\n\n" +
                                "üí° B·∫°n c≈©ng c√≥ th·ªÉ b·∫•m c√°c n√∫t trong menu ƒë·ªÉ thao t√°c nhanh.";
                            await bot.SendMessage(
                                chatId,
                                text: EscapeMarkdown(helpText),
                                parseMode: ParseMode.MarkdownV2,
                                cancellationToken: token
                            );
                            break;
                    }

                    await bot.AnswerCallbackQuery(callback.Id);
                    return;
                }

                // üü° 2Ô∏è‚É£ N·∫øu l√† tin nh·∫Øn vƒÉn b·∫£n
                if (update.Message?.Text is not string messageText)
                    return;

                var chatIdText = update.Message.Chat.Id;
                var user = update.Message.From;
                var lower = messageText.Trim().ToLower();

                await _db.AddUserAsync(chatIdText, user?.Username);
                Console.WriteLine($"üì© Tin nh·∫Øn t·ª´ {chatIdText}: {messageText}");

                string reply;

                switch (lower)
                {
                    // üèÅ /start
                    case "/start":
                        string menuText =
        $@"üåü *Ch√†o m·ª´ng {EscapeMarkdown(user?.FirstName ?? "b·∫°n")} ƒë·∫øn v·ªõi BOT Gi√° V√†ng BTMC!* üíé

üìä Theo d√µi *gi√° v√†ng BTMC* m·ªõi nh·∫•t  
üë§ Xem th√¥ng tin ng∆∞·ªùi d√πng c·ªßa b·∫°n  
‚ÑπÔ∏è H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot

Ch·ªçn m·ªôt ch·ª©c nƒÉng b√™n d∆∞·ªõi üëá";

                        var menuKeyboard = new InlineKeyboardMarkup(new[]
                        {
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("üí∞ Xem gi√° v√†ng", "giavang"),
                                InlineKeyboardButton.WithCallbackData("üë§ Th√¥ng tin c√° nh√¢n", "userinfo")
                            },
                            new[]
                            {
                                InlineKeyboardButton.WithCallbackData("üìò Tr·ª£ gi√∫p", "help"),
                                InlineKeyboardButton.WithUrl("üåê Website BTMC", "https://btmc.vn")
                            }
                        });

                        await bot.SendMessage(
                            chatIdText,
                            text: EscapeMarkdown(menuText),
                            parseMode: ParseMode.MarkdownV2,
                            replyMarkup: menuKeyboard,
                            cancellationToken: token
                        );
                        break;

                    // üë§ /userinfo
                    case "/me":
                    case "/userinfo":
                        reply = await _userService.GetUserInfoAsync(user);
                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;

                    // üí∞ /giavang
                    case "/giavang":
                        reply = await _goldService.GetGoldPriceAsync();

                        // G·ª≠i admin log
                        string adminText =
                            $"üí∞ *C·∫≠p nh·∫≠t gi√° v√†ng BTMC m·ªõi nh·∫•t:*\n\n{reply}\n‚è∞ {DateTime.Now:HH\\:mm\\:ss dd\\/MM\\/yyyy}";
                        await _bot.SendMessage(
                            _adminChatId,
                            text: EscapeMarkdown(adminText),
                            parseMode: ParseMode.MarkdownV2,
                            cancellationToken: token
                        );

                        // G·ª≠i ng∆∞·ªùi d√πng
                        await bot.SendMessage(
                            chatIdText,
                            text: EscapeMarkdown($"üí∞ Gi√° v√†ng BTMC m·ªõi nh·∫•t:\n\n{reply}"),
                            parseMode: ParseMode.MarkdownV2,
                            cancellationToken: token
                        );
                        break;

                    // üìò /help
                    case "/help":
                        reply =
                            "üìò *L·ªánh h·ªó tr·ª£:*\n" +
                            "/start - B·∫Øt ƒë·∫ßu\n" +
                            "/giavang - Xem gi√° v√†ng hi·ªán t·∫°i\n" +
                            "/userinfo - Th√¥ng tin ng∆∞·ªùi d√πng\n" +
                            "/help - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng";
                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;

                    // üë• /users
                    case "/users":
                        int total = await _db.CountUsersAsync();
                        reply = $"üëã Ch√†o {EscapeMarkdown(user?.FirstName ?? "b·∫°n")}! B·∫°n l√† ng∆∞·ªùi d√πng th·ª© {total} c·ªßa bot n√†y.";
                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;

                    // ‚öôÔ∏è /update
                    case string msg when msg.StartsWith("/update"):
                        if (chatIdText != 5642891542)
                        {
                            reply = "üö´ L·ªánh n√†y ch·ªâ d√†nh cho admin.";
                            break;
                        }

                        var parts = msg.Split(' ', 3, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length < 3)
                        {
                            reply = "‚öôÔ∏è C√∫ ph√°p ƒë√∫ng:\n`/update <chatId> <username>`\n\nV√≠ d·ª•:\n`/update 123456789 john_doe`";
                            break;
                        }

                        if (!long.TryParse(parts[1], out long targetChatId))
                        {
                            reply = "‚ùå ChatId kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.";
                            break;
                        }

                        string newUsername = parts[2].Trim();
                        using (var connection = new SqliteConnection("Data Source=data.db"))
                        {
                            await connection.OpenAsync();
                            var checkCmd = connection.CreateCommand();
                            checkCmd.CommandText = "SELECT COUNT(*) FROM Users WHERE ChatId = $chatId";
                            checkCmd.Parameters.AddWithValue("$chatId", targetChatId);
                            long count = (long)await checkCmd.ExecuteScalarAsync();

                            if (count == 0)
                            {
                                reply = $"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ ChatId = {targetChatId}.";
                                break;
                            }

                            var updateCmd = connection.CreateCommand();
                            updateCmd.CommandText = "UPDATE Users SET Username = $username WHERE ChatId = $chatId";
                            updateCmd.Parameters.AddWithValue("$username", newUsername);
                            updateCmd.Parameters.AddWithValue("$chatId", targetChatId);
                            int rows = await updateCmd.ExecuteNonQueryAsync();
                            reply = rows > 0
                                ? $"‚úÖ ƒê√£ c·∫≠p nh·∫≠t username c·ªßa ChatId `{targetChatId}` th√†nh `{newUsername}`."
                                : "‚ö†Ô∏è C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.";
                        }
                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;

                    // üì¢ /sendall
                    case string msg when msg.StartsWith("/sendall"):
                        if (chatIdText != 5642891542)
                        {
                            reply = "üö´ L·ªánh n√†y ch·ªâ d√†nh cho admin.";
                            break;
                        }

                        string textToSend = msg.Replace("/sendall", "").Trim();
                        if (string.IsNullOrEmpty(textToSend))
                        {
                            reply = "üì¢ Nh·∫≠p n·ªôi dung sau l·ªánh. V√≠ d·ª•:\n`/sendall Ch√†o m·ªçi ng∆∞·ªùi!`";
                        }
                        else
                        {
                            await BroadcastMessageAsync(textToSend);
                            reply = "‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng.";
                        }

                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;

                    // ü§ñ Chat AI
                    default:
                        await bot.SendChatAction(chatIdText, ChatAction.Typing, cancellationToken: token);
                        reply = await _gemini.AskAsync(messageText);
                        await bot.SendMessage(chatIdText, EscapeMarkdown(reply), ParseMode.MarkdownV2, cancellationToken: token);
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è L·ªói bot: {ex.Message}");
            }
        }

        private static string EscapeMarkdown1(string text)
        {
            if (string.IsNullOrEmpty(text)) return text;

            // Tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong MarkdownV2
            var specialChars = new[] { "_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!" };
            foreach (var ch in specialChars)
                text = text.Replace(ch, "\\" + ch);

            return text;
        }
        private static string EscapeMarkdown(string text)
        {
            if (string.IsNullOrEmpty(text)) return text;
            text = text.Replace("\\", "\\\\"); // escape backslash tr∆∞·ªõc
            string[] specials = { "_", "*", "[", "]", "(", ")", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!" };
            foreach (var ch in specials)
                text = text.Replace(ch, "\\" + ch);
            return text;
        }

        private async Task AutoUpdateGoldPriceAsync(CancellationToken token)
        {
            Console.WriteLine("‚è≥ B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông c·∫≠p nh·∫≠t gi√° v√†ng...");

            while (!token.IsCancellationRequested)
            {
                try
                {
                    var goldInfo = await _goldService.GetGoldPriceAsync();
                    await _bot.SendMessage(
                        chatId: _adminChatId,
                        text: $"üí∞ *C·∫≠p nh·∫≠t gi√° v√†ng BTMC m·ªõi nh·∫•t:*\n\n{goldInfo}\n‚è∞ {DateTime.Now:HH:mm:ss dd/MM/yyyy}",
                        parseMode: ParseMode.Markdown,
                        cancellationToken: token
                    );

                    Console.WriteLine($"‚úÖ ƒê√£ g·ª≠i gi√° v√†ng l√∫c {DateTime.Now}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t gi√° v√†ng: {ex.Message}");
                }

                // ‚è∞ ch·ªù 5 ph√∫t
                await Task.Delay(TimeSpan.FromHours(1), token);
            }
        }
        // auto load truyen service
        private async Task AutoUpdateComicAsync(CancellationToken token)
        {
            Console.WriteLine("‚è≥ B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông l·∫•y th√¥ng tin truy·ªán...");
            while (!token.IsCancellationRequested)
            {
                try
                {
                    var info = await _comicService.GetComicInfoAsync();

                    await _bot.SendMessage(
                        chatId: _adminChatId,
                        text: info,
                        parseMode: ParseMode.Markdown,
                        cancellationToken: token
                    );

                    Console.WriteLine($"‚úÖ ƒê√£ g·ª≠i th√¥ng tin truy·ªán l√∫c {DateTime.Now:HH:mm:ss}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è L·ªói khi l·∫•y truy·ªán': {ex.Message}");
                }

                await Task.Delay(TimeSpan.FromSeconds(10), token);

                // ‚è∞ L·∫∑p l·∫°i sau 1 gi·ªù
                await Task.Delay(TimeSpan.FromHours(1), token);
            }
        }
        private Task HandleErrorAsync(ITelegramBotClient bot, Exception ex, CancellationToken token)
        {
            Console.WriteLine($"‚ö†Ô∏è L·ªói bot: {ex.Message}");
            return Task.CompletedTask;
        }
        //send to all user
        public async Task BroadcastMessageAsync(string message)
        {
            try
            {
                var userIds = await _db.GetAllUserIdsAsync();
                foreach (var chatId in userIds)
                {
                    try
                    {
                        await _bot.SendMessage(chatId, message);
                        await Task.Delay(1000);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ö†Ô∏è Kh√¥ng g·ª≠i ƒë∆∞·ª£c t·ªõi {chatId}: {ex.Message}");
                    }
                }

                Console.WriteLine("‚úÖ Ho√†n t·∫•t g·ª≠i tin h√†ng lo·∫°t.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi g·ª≠i broadcast: {ex.Message}");
            }
        }

    }

}
