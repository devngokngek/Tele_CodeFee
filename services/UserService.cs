using Telegram.Bot;
using Telegram.Bot.Types;
using System;
using System.Threading.Tasks;
using System.Text;

namespace TeleBot.Services
{
    public class UserService
    {
        private readonly TelegramBotClient _bot;

        public UserService(TelegramBotClient bot)
        {
            _bot = bot;
        }

        // ‚úÖ H√†m l·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß ng∆∞·ªùi d√πng ƒëang chat
        public async Task<string> GetUserInfoAsync(User user)
        {
            if (user == null)
                return "‚ùå Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng.";

            var now = DateTime.UtcNow.AddHours(7);
            var joinEmoji = user.IsBot ? "ü§ñ" : "üßç";

            var info =
            $"‚ï≠‚îÄ‚îÄ‚îÄ ‚ú® *TH√îNG TIN TELEGRAM* ‚ú® ‚îÄ‚îÄ‚îÄ‚ïÆ\n" +
            $"‚îú üÜî *ID:* `{user.Id}`\n" +
            $"‚îú üë§ *T√™n:* {EscapeMarkdownV2(user.FirstName + " " + (user.LastName ?? ""))}\n" +
            $"{(string.IsNullOrEmpty(user.Username) ? "" : $"‚îú üí¨ *Username:* @{EscapeMarkdownV2(user.Username)}\n")}" +
            $"‚îú üåç *Ng√¥n ng·ªØ:* {user.LanguageCode?.ToUpper() ?? "Kh√¥ng r√µ"}\n" +
            $"‚îú ü§ñ *L√† bot:* {(user.IsBot ? "‚úÖ C√≥" : "‚ùå Kh√¥ng")}\n" +
            $"‚îú üíé *Premium:* {(user.IsPremium ? "üåü C√≥" : "üö´ Kh√¥ng")}\n" +
            $"‚îú üïí *Th·ªùi gian:* {DateTime.Now:HH:mm:ss dd/MM/yyyy}\n" +
            $"‚îú üîó *Li√™n k·∫øt:* [Nh·∫•n ƒë·ªÉ nh·∫Øn tin](tg://user?id={user.Id})\n" +
            $"‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n" +
            $"‚ú® _Th√¥ng tin ƒë∆∞·ª£c cung c·∫•p b·ªüi bot_";

            string EscapeMarkdownV2(string text)
            {
                if (string.IsNullOrEmpty(text)) return text;

                char[] specialChars = { '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!' };
                StringBuilder result = new StringBuilder();

                foreach (char c in text)
                {
                    if (Array.Exists(specialChars, x => x == c))
                        result.Append('\\');
                    result.Append(c);
                }

                return result.ToString();
            }

            return info;
        }
        public User? GetUserFromUpdate(Update update)
        {
            if (update == null)
                return null;

            // ∆Øu ti√™n l·∫•y t·ª´ Message
            if (update.Message?.From != null)
                return update.Message.From;

            // N·∫øu l√† CallbackQuery (n√∫t b·∫•m inline)
            if (update.CallbackQuery?.From != null)
                return update.CallbackQuery.From;

            // N·∫øu l√† InlineQuery (khi user t√¨m bot inline)
            if (update.InlineQuery?.From != null)
                return update.InlineQuery.From;

            // N·∫øu l√† ChatMemberUpdated (khi join/leave)
            if (update.MyChatMember?.From != null)
                return update.MyChatMember.From;

            return null;
        }

        // ‚úÖ H√†m l·∫•y ChatId c·ªßa ng∆∞·ªùi ƒëang chat (r·∫•t ti·ªán)
        public long? GetChatIdFromUpdate(Update update)
        {
            if (update?.Message?.Chat != null)
                return update.Message.Chat.Id;

            if (update?.CallbackQuery?.Message?.Chat != null)
                return update.CallbackQuery.Message.Chat.Id;

            if (update?.InlineQuery?.From != null)
                return update.InlineQuery.From.Id;

            if (update?.MyChatMember?.Chat != null)
                return update.MyChatMember.Chat.Id;

            return null;
        }

        // üëâ H√†m escape MarkdownV2 (d√πng n·ªôi b·ªô)
        private static string EscapeMarkdownV2(string text)
        {
            if (string.IsNullOrEmpty(text)) return text;

            char[] specialChars = { '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!' };
            StringBuilder result = new StringBuilder();

            foreach (char c in text)
            {
                if (Array.Exists(specialChars, x => x == c))
                    result.Append('\\');
                result.Append(c);
            }

            return result.ToString();
        }
    }
}
